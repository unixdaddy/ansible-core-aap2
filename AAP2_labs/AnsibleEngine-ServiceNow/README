ANSIBLE - TOWER - SERVICENOW
1. starting from stratch - create repo  - 1, 1a, 1b, NOT required if this REPO was cloned
mkdir -p Ansible-Tower/collections  
cd Ansible-Tower  
  
1a. Ensure the collection is not stored in GIT Repo  
cat > .gitignore << EOF  
collections/*  
!collections/requirements.yml  
EOF  
  git init  
  git status  
  git add .  
  git status  
  git commit -m "Testing using collections in Ansible Tower"  
  git branch  
  git branch -M Main  
  git branch  
  git remote add origin git@github.com:USERNAME/REPO.git  
  git push -u origin main  
  git remote  
  git remote -v  

1b. Install Servicenow Collection
  ##installs in HOMEDIR/.ansible - installs outside of REPO  
  # ansible-galaxy collection install servicenow.servicenow   
  
  ##BEST for tower - CREATE collections/requirements.yml - Automatically run by TOWER  
  ##Setup Requirements file and then use it to install 
  ##.gitignore will ensure collections in collection directory are not sync'd BUT
  ##TOWER will automatically run requirements.yml and pull in the needed collections
  ##we can still test outside of TOWER as ansible.cfg points to the ./collections directory for  
  ##servicenow plugin  
  ##you might also want to pin to a specific collection version
  
cat > collections/requirements.yml <<EOF  
collections:  
 - name: servicenow.servicenow  
   source: https://galaxy.ansible.com  
EOF  

2. Existing Repo with setup already in it - not required if step 1, 1a, 1b was performed
  cd   
  git clone git@github.com:USERNAME/REPO.git  
  cd Ansible-Tower/
  
3. Install Servicenow Collection using requirements.yml 
   ansible-galaxy collection install -r collections/requirements.yml -p collections/  

  ##Remove .gitignore AND collections/requirements.yml - GIT will get static copy of collection which TOWER 
  ##will use as the ansible.cfg points to the local collections path.

4. Servicenow Requires pysnow python module -- create a yaml and install  
  #manual - pip3 install pysnow and pip3 list | grep pysnow  
  ansible-playbook install_pysnow.yml # setup a repo/project to install this in tower under AWX USER

5. On WSL had an issue with complaining about netaddr when running now.yaml 
  ## so had to install it
  pip install netaddr
  
6. Create a local ansible.cfg - in REPO - see ansible.cfg in this Repo  - NOT required if REPO clonned
  vim /REPO/ansible.cfg  
  [defaults]  
  
  collections_paths = ./collections:/usr/share/ansible/collections  

7. Create encrypted password file OR setup ENV variables OR setup Tower Credential

  ## You can either use ENV or Create a vault encrypted file with credentials to ServiceNow 
  ## Instance i.e password.yaml. In the password file set SN_PASSWORD like this
cat > password.yaml <<EOF  
 sn_password: XXXXX 
EOF  
 ## encrypt with ansible-vault - enter the password when prompted
 ansible-vault encrypt password.yaml
OR
 ## if using ENV 
  export SN_PASSWORD=XXX  
  export SN_INSTANCE=devXXXXX  
  export SN_USERNAME=admin  
 
 ##NOTE: if using TOWER then either 
    ##create credential to unlock vault - password.yaml
      OR
    ##Setup New credential type - ServiceNow
    ##Use that new credential type to create ServiceNow credential
##Input configuration panel
fields:
  - id: instance
    type: string
    label: Instance
  - id: username
    type: string
    label: Username
  - id: password
    type: string
    label: Password
    secret: true
required:
  - instance
  - username
  - password
##Injector configuration panel
env:
  SN_INSTANCE: '{{instance}}'
  SN_PASSWORD: '{{password}}'
  SN_USERNAME: '{{username}}'

######## NOTE: MAKE SURE YOUR SERVICENOW DEMO INSTANCE IS AWAKE ###########
8. Use Servicenow plugin to query SNOW for CIs - now.yaml
  ## Create now.yaml <-- name must end in now.yaml i.e. blah-now.yaml  
  ## see now.yaml for example OR  
  ## use ansible-doc to see the examples and create from that  
  ansible-doc -t inventory servicenow.servicenow.now  
  
  ## set ENV variables see step 7  
    OR
  ## update the inventory file (now.yaml) with following lines
  instance: devXXX
  username: admin
  password: 'XXXX'   
  
 ## following commands should now work
  ansible-inventory -i now.yaml --graph  
  ansible-inventory -i now.yaml --list  
  ansible-inventory -i now.yaml --host "OWA-SD-01"  
  
9. Create Incidents in Servicenow - snow_incident.yaml
  ## Create yaml file  
  ## see snow_incident.yaml for example OR  
  ## use ansible-doc to see the examples and create from that  
  ansible-doc servicenow.servicenow.snow_record  
  
  ## if not using ENV - using load password task to include encrypted password file - see step 7
  ansible-playbook snow_incident.yaml --ask-vault-pass  
  ## if using ENV (comment out load password task in relevant snow_incident.yaml file) - see step 7
  ansible-playbook snow_incident.yaml  
  
10. Find Incidents in Servicenow - snow_incident_find.yaml  
  ## Create yaml file  
  ## see snow_incident_find.yaml for example OR  
  ## use ansible-doc to see the examples and create from that  
  ansible-doc servicenow.servicenow.snow_record_find  
  
  ## if not using ENV - using load password task to include encrypted password file - see step 7
   ansible-playbook snow_incident_find.yaml --ask-vault-pass  -e "sn_number=INC0010004"
  ## if using ENV (comment out load password task in snow_incident_find.yaml)  - see step 7
  ansible-playbook snow_incident_find.yaml -e "sn_number=INC0010004"
  
11. Install Webservers on Digital Ocean VMs - webservers.yaml  
  ## After creating VM using doctl or alternatively ansible 
  #doctl compute droplet create --region lon1 --image ubuntu-18-04-x64 --size s-1vcpu-1gb ansible-1 --ssh-keys ID  
  ## Create inventory using do-ansible-inventory  
  #do-ansible-inventory --group-by-tag --group-by-project --group-by-region --out ~/do_inventory/inventory  
  ansible-playbook -i ../do_inventory/inventory webservers.yaml -e 'host_name=all'  
  
12. Install Webservers on Digital Ocean VMs and Generate a incident - webservers_snow_incident.yaml
  ## This will deliberatly trigger an incident when things start  
  ## Normally you would trigger it on a failure but i am testing  
  ## if not using ENV - using load password task to include encrypted password file - see step 7   
  ansible-playbook -i ../do_inventory/inventory webservers_snow_incident.yaml -e 'host_name=all' --ask-vault-pass  
  ## if using ENV  (comment out load password task in webserver_snow_incident.yaml)  - see step 7
  ansible-playbook -i ../do_inventory/inventory webservers_snow_incident.yaml -e 'host_name=all' 

